{"ast":null,"code":"var _jsxFileName = \"/home/oshimayamato/practice/matching/frontend/src/components/timeline/Timeline.jsx\",\n  _s = $RefreshSig$();\nimport React, { useContext, useEffect, useState } from 'react';\nimport Post from '../post/Post';\nimport Share from '../share/Share';\nimport \"./Timeline.css\";\nimport axios from \"axios\";\nimport { AuthContext } from '../../state/AuthContext';\nimport Pagination from \"react-paginate\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Timeline(_ref) {\n  _s();\n  let {\n    username\n  } = _ref;\n  const [posts, setPosts] = useState([]);\n  //現在のページ\n  const [currentPage, setCurrentPage] = useState(1);\n  //1ページあたりに表示される投稿数\n  const [postsPerPage] = useState(5);\n  const {\n    user\n  } = useContext(AuthContext);\n\n  //投稿をとってくる\n  useEffect(() => {\n    const fetchPosts = async () => {\n      const response = username ? await axios.get(`/posts/profile/${username}`) //プロフィールの場合\n      : await axios.get(`/posts/timeline/${user._id}`); //ホームの場合\n      // console.log(response);\n      setPosts(response.data.sort((post1, post2) => {\n        return new Date(post2.createdAt) - new Date(post1.createdAt);\n      }));\n    };\n    fetchPosts();\n  }, [username, user._id]);\n\n  //usernameがあるとき・・・username==user.username\n  //ないとき\n\n  const handlePageChange = e => {\n    setCurrentPage(e.selected + 1);\n  };\n\n  //現在のページに表示する投稿を取得する\n\n  //現在のページの最後の投稿のインデックス\n  const indexOfLastPost = currentPage * postsPerPage;\n  //現在のページの最初の投稿のインデックス\n  const indexOfFirstPost = indexOfLastPost - postsPerPage;\n  //現在のページに表示する投稿の配列\n  const currentPosts = posts.slice(indexOfFirstPost, indexOfLastPost);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"timeline\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"timelineWrapper\",\n      children: [user.type ? /*#__PURE__*/_jsxDEV(Share, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 11\n      }, this) : \"\", currentPosts.map(post => /*#__PURE__*/_jsxDEV(Post, {\n        post: post\n      }, post._id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), posts ? /*#__PURE__*/_jsxDEV(Pagination, {\n      previousLabel: \"前のページ\",\n      nextLabel: \"次のページ\",\n      breakLabel: \"...\",\n      breakClassName: \"break-me\",\n      pageCount: Math.ceil(posts.length / postsPerPage),\n      marginPagesDisplayed: 2,\n      pageRangeDisplayed: 5,\n      onPageChange: handlePageChange,\n      containerClassName: \"pagination\",\n      subContainerClassName: \"pages pagination\",\n      activeClassName: \"active\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 11\n    }, this) : \"\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n}\n_s(Timeline, \"fFgK5vTni79gzYFqMjApPNIPeK8=\");\n_c = Timeline;\nvar _c;\n$RefreshReg$(_c, \"Timeline\");","map":{"version":3,"names":["React","useContext","useEffect","useState","Post","Share","axios","AuthContext","Pagination","Timeline","username","posts","setPosts","currentPage","setCurrentPage","postsPerPage","user","fetchPosts","response","get","_id","data","sort","post1","post2","Date","createdAt","handlePageChange","e","selected","indexOfLastPost","indexOfFirstPost","currentPosts","slice","type","map","post","Math","ceil","length"],"sources":["/home/oshimayamato/practice/matching/frontend/src/components/timeline/Timeline.jsx"],"sourcesContent":["import React, { useContext, useEffect, useState } from 'react'\nimport Post from '../post/Post';\nimport Share from '../share/Share';\nimport \"./Timeline.css\";\nimport axios from \"axios\"\nimport { AuthContext } from '../../state/AuthContext';\nimport Pagination from \"react-paginate\";\n\nexport default function Timeline({ username }) {\n  const [posts, setPosts] = useState([]);\n  //現在のページ\n  const [currentPage, setCurrentPage] = useState(1);\n  //1ページあたりに表示される投稿数\n  const [postsPerPage] = useState(5);\n\n  const { user } = useContext(AuthContext)\n  \n  //投稿をとってくる\n  useEffect(() => {\n    const fetchPosts = async () => {\n      const response = username \n      ? await axios.get(`/posts/profile/${username}`) //プロフィールの場合\n      : await axios.get(`/posts/timeline/${user._id}`);//ホームの場合\n      // console.log(response);\n      setPosts(\n        response.data.sort((post1, post2) => {\n        return new Date(post2.createdAt) - new Date(post1.createdAt);\n      })\n      );\n    };\n    fetchPosts();\n  }, [username, user._id]);\n\n  //usernameがあるとき・・・username==user.username\n  //ないとき\n\n  const handlePageChange = (e) => {\n    setCurrentPage(e.selected + 1);\n  }\n\n  //現在のページに表示する投稿を取得する\n\n  //現在のページの最後の投稿のインデックス\n  const indexOfLastPost = currentPage * postsPerPage;\n  //現在のページの最初の投稿のインデックス\n  const indexOfFirstPost = indexOfLastPost - postsPerPage;\n  //現在のページに表示する投稿の配列\n  const currentPosts = posts.slice(indexOfFirstPost,indexOfLastPost);\n\n  return (\n    <div className=\"timeline\">\n      <div className=\"timelineWrapper\">\n        {(user.type)\n        ? <Share />\n        : \"\"\n        }\n        \n        {currentPosts.map((post) => (\n          <Post post={post} key={post._id} />))\n        }\n      </div>\n      {posts \n        ? <Pagination\n        previousLabel={\"前のページ\"}\n        nextLabel={\"次のページ\"}\n        breakLabel={\"...\"}\n        breakClassName={\"break-me\"}\n        pageCount={Math.ceil(posts.length/postsPerPage)}\n        marginPagesDisplayed={2}\n        pageRangeDisplayed={5}\n        onPageChange={handlePageChange}\n        containerClassName={\"pagination\"}\n        subContainerClassName={\"pages pagination\"}\n        activeClassName={\"active\"}\n      />\n        : \"\"\n      }\n      \n    </div>\n  )\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}