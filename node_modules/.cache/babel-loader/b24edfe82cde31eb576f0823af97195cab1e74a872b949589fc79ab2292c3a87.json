{"ast":null,"code":"var _jsxFileName = \"/home/oshimayamato/practice/matching/frontend/src/pages/rooms/TalkRoom.jsx\",\n  _s = $RefreshSig$();\nimport axios from 'axios';\nimport React, { useContext, useEffect, useRef, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { io } from 'socket.io-client';\nimport SingleMessage from '../../components/sendmessage/SingleMessage';\nimport { AuthContext } from '../../state/AuthContext';\nimport styles from \"@chatscope/chat-ui-kit-styles/dist/default/styles.min.css\";\nimport { MainContainer, ChatContainer, MessageList, Message, MessageInput, Avatar } from \"@chatscope/chat-ui-kit-react\";\nimport \"./TalkRoom.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function TalkRoom() {\n  _s();\n  const {\n    user\n  } = useContext(AuthContext);\n\n  // input欄の管理\n  const [message, setMessage] = useState(\"\");\n  // トーク履歴の管理\n  const [list, setList] = useState([]);\n  const roomId = useParams().room_id;\n  const [id, setId] = useState(roomId);\n  const messageContainerRef = useRef(null);\n  // 受け取れた\n  // console.log(roomId);\n\n  useEffect(() => {\n    //通信したいURLを指定\n    //CORSの関係でエラーが出るので\n    //サーバー側で処理を書く\n    const socket = io(\"http://localhost:5000\");\n    console.log(\"a\");\n    // console.log(id);\n    // socket.join(id);\n\n    //このタイミングでDBから過去のトーク履歴をもってきてほしいと送信\n    socket.emit('join', roomId);\n\n    //いままでのトーク履歴がこれに返る\n    socket.on('init', messages => {\n      setList(messages);\n    });\n\n    //自分や相手がメッセージを送信した際にここに返る\n    socket.on('addMessage', message => {\n      setList(list => [...list, message]);\n    });\n    messageContainerRef.current.scrollTop = messageContainerRef.current.scrollHeight;\n\n    //一旦通信を切っている\n    return () => {\n      socket.disconnect();\n    };\n  }, [list]); //[roomId,list]\n  // console.log(data)\n\n  //通信したいURLを指定\n  const socket = io(\"http://localhost:5000\");\n  const handleInputMessage = e => {\n    e.preventDefault();\n    setMessage(e.target.value);\n  };\n\n  // socket.on('addMessage', async(message) => {\n  //   console.log(\"返ってきました\")\n  //   setList(list => [...list, message]);\n  // })\n\n  const handleSendMessage = async e => {\n    e.preventDefault();\n    const User = {\n      senderId: user._id,\n      message: message,\n      roomId: roomId\n    };\n    socket.emit('send_message', User);\n    setMessage(\"\");\n    console.log(\"sousinn\");\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"talkroom\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"MessageArea\",\n        ref: messageContainerRef,\n        children: list.map((item, index) => /*#__PURE__*/_jsxDEV(SingleMessage, {\n          item: item\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 11\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chatInputButton\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"\\u306B\\u3061\\u3083\\u3042\\u30FB\\u30FB\\u30FB\\u3063\\u3068\",\n          onChange: handleInputMessage,\n          value: message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            backgroundColor: message === \"\" ? \"rgba(0,0,0,0.5)\" : \"rgba(0,0,0,1)\"\n          },\n          disabled: message === \"\",\n          onClick: handleSendMessage,\n          children: \"\\u9001\\u4FE1\\u3059\\u308B\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 107,\n    columnNumber: 5\n  }, this);\n}\n\n// export default function TalkRoom() {\n//   return (\n//     <div style={{ position:\"relative\", height: \"500px\" }}>\n//       <MainContainer>\n//         <ChatContainer>       \n//           <MessageList>\n//             <Message model={{\n//                     message: \"Hello my friend\",\n//                     sentTime: \"just now\",\n//                     sender: \"Joe\"\n//                     }} />\n//             </MessageList>\n//           <MessageInput placeholder=\"Type message here\" />        \n//         </ChatContainer>\n//       </MainContainer>\n//     </div>\n//   )\n// }\n_s(TalkRoom, \"GhjirB7Xizqif9V0CLxTs1381eY=\", false, function () {\n  return [useParams];\n});\n_c = TalkRoom;\nvar _c;\n$RefreshReg$(_c, \"TalkRoom\");","map":{"version":3,"names":["axios","React","useContext","useEffect","useRef","useState","useParams","io","SingleMessage","AuthContext","styles","MainContainer","ChatContainer","MessageList","Message","MessageInput","Avatar","TalkRoom","user","message","setMessage","list","setList","roomId","room_id","id","setId","messageContainerRef","socket","console","log","emit","on","messages","current","scrollTop","scrollHeight","disconnect","handleInputMessage","e","preventDefault","target","value","handleSendMessage","User","senderId","_id","map","item","index","backgroundColor"],"sources":["/home/oshimayamato/practice/matching/frontend/src/pages/rooms/TalkRoom.jsx"],"sourcesContent":["import axios from 'axios';\nimport React, { useContext, useEffect, useRef, useState } from 'react'\nimport { useParams } from 'react-router-dom';\nimport { io } from 'socket.io-client';\nimport SingleMessage from '../../components/sendmessage/SingleMessage';\nimport { AuthContext } from '../../state/AuthContext';\n\nimport styles from \"@chatscope/chat-ui-kit-styles/dist/default/styles.min.css\";\nimport {\n  MainContainer,\n  ChatContainer,\n  MessageList,\n  Message,\n  MessageInput,\n  Avatar\n} from \"@chatscope/chat-ui-kit-react\";\n\nimport \"./TalkRoom.css\"\n  \n\nexport default function TalkRoom() {\n\n\n  const { user } = useContext(AuthContext)\n\n  // input欄の管理\n  const [message, setMessage] = useState(\"\");\n  // トーク履歴の管理\n  const [list, setList] = useState([])\n\n  const roomId = useParams().room_id\n\n  const [id, setId] = useState(roomId)\n\n  const messageContainerRef = useRef(null);\n  // 受け取れた\n  // console.log(roomId);\n\n  useEffect(() => {\n\n    //通信したいURLを指定\n    //CORSの関係でエラーが出るので\n    //サーバー側で処理を書く\n    const socket = io(\"http://localhost:5000\");\n\n    console.log(\"a\")\n    // console.log(id);\n    // socket.join(id);\n    \n\n    //このタイミングでDBから過去のトーク履歴をもってきてほしいと送信\n    socket.emit('join', roomId);\n\n    //いままでのトーク履歴がこれに返る\n    socket.on('init', (messages) => {\n      setList(messages);\n    })\n\n    \n\n\n    //自分や相手がメッセージを送信した際にここに返る\n    socket.on('addMessage', (message) => {\n      setList(list => [...list, message]);\n    })\n\n    messageContainerRef.current.scrollTop = messageContainerRef.current.scrollHeight;\n\n    //一旦通信を切っている\n    return () => {\n      socket.disconnect();\n    };\n\n    \n    \n  }, [list])//[roomId,list]\n  // console.log(data)\n\n  //通信したいURLを指定\n  const socket = io(\"http://localhost:5000\");\n\n  const handleInputMessage = (e) => {\n    e.preventDefault();\n    setMessage(e.target.value)\n  }\n\n  // socket.on('addMessage', async(message) => {\n  //   console.log(\"返ってきました\")\n  //   setList(list => [...list, message]);\n  // })\n\n\n  const handleSendMessage = async (e) => {\n    e.preventDefault();\n    const User = {\n      senderId: user._id,\n      message: message,\n      roomId: roomId \n    }\n    socket.emit('send_message', User);\n    setMessage(\"\");\n    console.log(\"sousinn\")\n  }\n\n  \n  return (\n    <div className=\"talkroom\">\n      <div className=\"container\">\n        <h2>{ \n            \n          }</h2>\n        <div className='MessageArea' ref={messageContainerRef}>\n          {list.map((item,index) => (\n          <SingleMessage key={index} item={item} />\n        ))}\n        </div>\n        \n        <div className=\"chatInputButton\">\n          <input type=\"text\" placeholder='にちゃあ・・・っと' onChange={handleInputMessage} value={message}/>\n          <button style={{ backgroundColor: message === \"\" ? \"rgba(0,0,0,0.5)\" : \"rgba(0,0,0,1)\"}} disabled={message === \"\"} onClick={handleSendMessage}>送信する</button>\n        </div>\n      </div>\n    </div>\n  )\n}\n\n\n\n// export default function TalkRoom() {\n//   return (\n//     <div style={{ position:\"relative\", height: \"500px\" }}>\n//       <MainContainer>\n//         <ChatContainer>       \n//           <MessageList>\n//             <Message model={{\n//                     message: \"Hello my friend\",\n//                     sentTime: \"just now\",\n//                     sender: \"Joe\"\n//                     }} />\n//             </MessageList>\n//           <MessageInput placeholder=\"Type message here\" />        \n//         </ChatContainer>\n//       </MainContainer>\n//     </div>\n//   )\n// }\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}