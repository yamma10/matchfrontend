{"ast":null,"code":"var _jsxFileName = \"/home/oshimayamato/practice/matching/frontend/src/pages/rooms/TalkRoom.jsx\";\nimport axios from 'axios';\nimport React, { useContext, useEffect, useRef, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { io } from 'socket.io-client';\nimport SingleMessage from '../../components/sendmessage/SingleMessage';\nimport { AuthContext } from '../../state/AuthContext';\nimport styles from \"@chatscope/chat-ui-kit-styles/dist/default/styles.min.css\";\nimport { MainContainer, ChatContainer, MessageList, Message, MessageInput, Avatar } from \"@chatscope/chat-ui-kit-react\";\nimport \"./TalkRoom.css\";\n\n// export default function TalkRoom() {\n\n//   const { user } = useContext(AuthContext)\n\n//   // input欄の管理\n//   const [message, setMessage] = useState(\"\");\n//   // トーク履歴の管理\n//   const [list, setList] = useState([])\n\n//   const roomId = useParams().room_id\n\n//   const [id, setId] = useState(roomId)\n\n//   const messageContainerRef = useRef(null);\n//   // 受け取れた\n//   // console.log(roomId);\n\n//   useEffect(() => {\n//     //通信したいURLを指定\n//     //CORSの関係でエラーが出るので\n//     //サーバー側で処理を書く\n//     const socket = io(\"http://localhost:5000\");\n\n//     // console.log(id);\n//     // socket.join(id);\n\n//     //このタイミングでDBから過去のトーク履歴をもってきてほしいと送信\n//     socket.emit('join', roomId);\n\n//     //いままでのトーク履歴がこれに返る\n//     socket.on('init', (messages) => {\n//       setList(messages);\n//     })\n\n//     messageContainerRef.current.scrollTop = messageContainerRef.current.scrollHeight;\n\n//     //自分や相手がメッセージを送信した際にここに返る\n//     socket.on('addMessage', (message) => {\n//       setList(list => [...list, message]);\n//     })\n//     //一旦通信を切っている\n//     return () => {\n//       socket.disconnect();\n//     };\n\n//   }, [list])\n//   // console.log(data)\n\n//   //通信したいURLを指定\n//   const socket = io(\"http://localhost:5000\");\n\n//   const handleInputMessage = (e) => {\n//     e.preventDefault();\n//     setMessage(e.target.value)\n//   }\n\n//   // socket.on('addMessage', async(message) => {\n//   //   console.log(\"返ってきました\")\n//   //   setList(list => [...list, message]);\n//   // })\n\n//   const handleSendMessage = async (e) => {\n//     e.preventDefault();\n//     const User = {\n//       senderId: user._id,\n//       message: message,\n//       roomId: roomId \n//     }\n//     socket.emit('send_message', User);\n//     setMessage(\"\");\n//     console.log(\"sousinn\")\n//   }\n\n//   return (\n//     <div className=\"talkroom\">\n//       <div className=\"container\">\n//         <h2>チャット</h2>\n//         <div className='MessageArea' ref={messageContainerRef}>\n//           {list.map((item,index) => (\n//           <SingleMessage key={index} item={item} />\n//         ))}\n//         </div>\n\n//         <div className=\"chatInputButton\">\n//           <input type=\"text\" placeholder='にちゃあ・・・っと' onChange={handleInputMessage} value={message}/>\n//           <button style={{ backgroundColor: message === \"\" ? \"rgba(0,0,0,0.5)\" : \"rgba(0,0,0,1)\"}} disabled={message === \"\"} onClick={handleSendMessage}>送信する</button>\n//         </div>\n//       </div>\n//     </div>\n//   )\n// }\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function TalkRoom() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      position: \"relative\",\n      height: \"500px\"\n    },\n    children: /*#__PURE__*/_jsxDEV(MainContainer, {\n      children: /*#__PURE__*/_jsxDEV(ChatContainer, {\n        children: [/*#__PURE__*/_jsxDEV(MessageList, {\n          children: /*#__PURE__*/_jsxDEV(Message, {\n            model: {\n              message: \"Hello my friend\",\n              sentTime: \"just now\",\n              sender: \"Joe\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(MessageInput, {\n          placeholder: \"Type message here\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 124,\n    columnNumber: 5\n  }, this);\n}\n_c = TalkRoom;\nvar _c;\n$RefreshReg$(_c, \"TalkRoom\");","map":{"version":3,"names":["axios","React","useContext","useEffect","useRef","useState","useParams","io","SingleMessage","AuthContext","styles","MainContainer","ChatContainer","MessageList","Message","MessageInput","Avatar","TalkRoom","position","height","message","sentTime","sender"],"sources":["/home/oshimayamato/practice/matching/frontend/src/pages/rooms/TalkRoom.jsx"],"sourcesContent":["import axios from 'axios';\nimport React, { useContext, useEffect, useRef, useState } from 'react'\nimport { useParams } from 'react-router-dom';\nimport { io } from 'socket.io-client';\nimport SingleMessage from '../../components/sendmessage/SingleMessage';\nimport { AuthContext } from '../../state/AuthContext';\n\nimport styles from \"@chatscope/chat-ui-kit-styles/dist/default/styles.min.css\";\nimport {\n  MainContainer,\n  ChatContainer,\n  MessageList,\n  Message,\n  MessageInput,\n  Avatar\n} from \"@chatscope/chat-ui-kit-react\";\n\nimport \"./TalkRoom.css\"\n  \n\n// export default function TalkRoom() {\n\n\n//   const { user } = useContext(AuthContext)\n\n//   // input欄の管理\n//   const [message, setMessage] = useState(\"\");\n//   // トーク履歴の管理\n//   const [list, setList] = useState([])\n\n//   const roomId = useParams().room_id\n\n//   const [id, setId] = useState(roomId)\n\n//   const messageContainerRef = useRef(null);\n//   // 受け取れた\n//   // console.log(roomId);\n\n//   useEffect(() => {\n//     //通信したいURLを指定\n//     //CORSの関係でエラーが出るので\n//     //サーバー側で処理を書く\n//     const socket = io(\"http://localhost:5000\");\n\n//     // console.log(id);\n//     // socket.join(id);\n    \n\n//     //このタイミングでDBから過去のトーク履歴をもってきてほしいと送信\n//     socket.emit('join', roomId);\n\n//     //いままでのトーク履歴がこれに返る\n//     socket.on('init', (messages) => {\n//       setList(messages);\n//     })\n\n//     messageContainerRef.current.scrollTop = messageContainerRef.current.scrollHeight;\n\n\n//     //自分や相手がメッセージを送信した際にここに返る\n//     socket.on('addMessage', (message) => {\n//       setList(list => [...list, message]);\n//     })\n//     //一旦通信を切っている\n//     return () => {\n//       socket.disconnect();\n//     };\n\n    \n    \n//   }, [list])\n//   // console.log(data)\n\n//   //通信したいURLを指定\n//   const socket = io(\"http://localhost:5000\");\n\n//   const handleInputMessage = (e) => {\n//     e.preventDefault();\n//     setMessage(e.target.value)\n//   }\n\n//   // socket.on('addMessage', async(message) => {\n//   //   console.log(\"返ってきました\")\n//   //   setList(list => [...list, message]);\n//   // })\n\n\n//   const handleSendMessage = async (e) => {\n//     e.preventDefault();\n//     const User = {\n//       senderId: user._id,\n//       message: message,\n//       roomId: roomId \n//     }\n//     socket.emit('send_message', User);\n//     setMessage(\"\");\n//     console.log(\"sousinn\")\n//   }\n\n  \n//   return (\n//     <div className=\"talkroom\">\n//       <div className=\"container\">\n//         <h2>チャット</h2>\n//         <div className='MessageArea' ref={messageContainerRef}>\n//           {list.map((item,index) => (\n//           <SingleMessage key={index} item={item} />\n//         ))}\n//         </div>\n        \n//         <div className=\"chatInputButton\">\n//           <input type=\"text\" placeholder='にちゃあ・・・っと' onChange={handleInputMessage} value={message}/>\n//           <button style={{ backgroundColor: message === \"\" ? \"rgba(0,0,0,0.5)\" : \"rgba(0,0,0,1)\"}} disabled={message === \"\"} onClick={handleSendMessage}>送信する</button>\n//         </div>\n//       </div>\n//     </div>\n//   )\n// }\n\n\n\nexport default function TalkRoom() {\n  return (\n    <div style={{ position:\"relative\", height: \"500px\" }}>\n      <MainContainer>\n        <ChatContainer>       \n          <MessageList>\n            <Message model={{\n                    message: \"Hello my friend\",\n                    sentTime: \"just now\",\n                    sender: \"Joe\"\n                    }} />\n            </MessageList>\n          <MessageInput placeholder=\"Type message here\" />        \n        </ChatContainer>\n      </MainContainer>\n    </div>\n  )\n}\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,KAAK,IAAIC,UAAU,EAAEC,SAAS,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AACtE,SAASC,SAAS,QAAQ,kBAAkB;AAC5C,SAASC,EAAE,QAAQ,kBAAkB;AACrC,OAAOC,aAAa,MAAM,4CAA4C;AACtE,SAASC,WAAW,QAAQ,yBAAyB;AAErD,OAAOC,MAAM,MAAM,2DAA2D;AAC9E,SACEC,aAAa,EACbC,aAAa,EACbC,WAAW,EACXC,OAAO,EACPC,YAAY,EACZC,MAAM,QACD,8BAA8B;AAErC,OAAO,gBAAgB;;AAGvB;;AAGA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAGA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAIA,eAAe,SAASC,QAAQ,GAAG;EACjC,oBACE;IAAK,KAAK,EAAE;MAAEC,QAAQ,EAAC,UAAU;MAAEC,MAAM,EAAE;IAAQ,CAAE;IAAA,uBACnD,QAAC,aAAa;MAAA,uBACZ,QAAC,aAAa;QAAA,wBACZ,QAAC,WAAW;UAAA,uBACV,QAAC,OAAO;YAAC,KAAK,EAAE;cACRC,OAAO,EAAE,iBAAiB;cAC1BC,QAAQ,EAAE,UAAU;cACpBC,MAAM,EAAE;YACR;UAAE;YAAA;YAAA;YAAA;UAAA;QAAG;UAAA;UAAA;UAAA;QAAA,QACC,eAChB,QAAC,YAAY;UAAC,WAAW,EAAC;QAAmB;UAAA;UAAA;UAAA;QAAA,QAAG;MAAA;QAAA;QAAA;QAAA;MAAA;IAClC;MAAA;MAAA;MAAA;IAAA;EACF;IAAA;IAAA;IAAA;EAAA,QACZ;AAEV;AAAC,KAjBuBL,QAAQ;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}