{"ast":null,"code":"var _jsxFileName = \"/home/oshimayamato/practice/matching/frontend/src/pages/rooms/TalkRoom.jsx\",\n  _s = $RefreshSig$();\nimport axios from 'axios';\nimport React, { useContext, useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { io } from 'socket.io-client';\nimport { AuthContext } from '../../state/AuthContext';\nimport \"./TalkRoom.css\";\n//通信したいURLを指定\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io(\"http://localhost:5000\");\n//CORSの関係でエラーが出るので\n//サーバー側で処理を書く\n\nexport default function TalkRoom() {\n  _s();\n  const {\n    user\n  } = useContext(AuthContext);\n  //APIで持ってきた過去のトーク履歴を入れる\n  const [data, setData] = useState([]);\n  // console.log(data);\n\n  // input欄の管理\n  const [message, setMessage] = useState(\"\");\n  const [list, setList] = useState([]);\n  const roomId = useParams().room_id;\n\n  // 受け取れた\n  // console.log(roomId);\n\n  useEffect(() => {\n    const fetchMessages = async () => {\n      const Messages = await axios.get(`/message/receive/${roomId}`);\n      // console.log(Messages.data);\n\n      const MessageData = Messages.data.map(item => {\n        sender_id;\n      });\n      console.log(MessageData);\n      setData(MessageData);\n      // console.log(typeof MessageData)\n      console.log(data);\n      data.map(datum => {\n        console.log(datum);\n        setList(...list, datum);\n      });\n    };\n    fetchMessages();\n  }, []);\n  // console.log(data)\n\n  //送信した段階でAPIを叩いてDBに登録\n  const handleSendMessage = async () => {\n    const User = {\n      senderId: user._id,\n      message: message,\n      roomId: roomId\n    };\n    //APIを叩いて、データを保存する\n    try {\n      const message = await axios.post(\"/message/send\", User);\n      // console.log(message.data);\n      //serverへ送信\n      socket.emit(\"send_message\", message.data);\n    } catch (err) {\n      console.log(err);\n    }\n    setMessage(\"\");\n    console.log(\"sousinn\");\n  };\n\n  //サーバーから受信\n  socket.on(\"received_message\", data => {\n    const {\n      _id,\n      ...rest\n    } = data;\n    console.log(rest);\n    console.log(\"データでした\");\n    //リストにデータを追加\n    setList([...list, data]);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"talkroom\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"\\u30C1\\u30E3\\u30C3\\u30C8\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chatInputButton\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"\\u306B\\u3061\\u3083\\u3042\\u30FB\\u30FB\\u30FB\\u3063\\u3068\",\n          onChange: e => setMessage(e.target.value),\n          value: message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            backgroundColor: message === \"\" ? \"rgba(0,0,0,0.5)\" : \"rgba(0,0,0,1)\"\n          },\n          disabled: message === \"\",\n          onClick: handleSendMessage,\n          children: \"\\u9001\\u4FE1\\u3059\\u308B\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this), list.map((chat, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chatArea\",\n        children: chat\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 5\n  }, this);\n}\n_s(TalkRoom, \"gqcWVfyJ0Maxy9DMmzeCEtM74QU=\", false, function () {\n  return [useParams];\n});\n_c = TalkRoom;\nvar _c;\n$RefreshReg$(_c, \"TalkRoom\");","map":{"version":3,"names":["axios","React","useContext","useEffect","useState","useParams","io","AuthContext","socket","TalkRoom","user","data","setData","message","setMessage","list","setList","roomId","room_id","fetchMessages","Messages","get","MessageData","map","item","sender_id","console","log","datum","handleSendMessage","User","senderId","_id","post","emit","err","on","rest","e","target","value","backgroundColor","chat","index"],"sources":["/home/oshimayamato/practice/matching/frontend/src/pages/rooms/TalkRoom.jsx"],"sourcesContent":["import axios from 'axios';\nimport React, { useContext, useEffect, useState } from 'react'\nimport { useParams } from 'react-router-dom';\nimport { io } from 'socket.io-client';\nimport { AuthContext } from '../../state/AuthContext';\n\nimport \"./TalkRoom.css\"\n  //通信したいURLを指定\n  const socket = io(\"http://localhost:5000\");\n  //CORSの関係でエラーが出るので\n  //サーバー側で処理を書く\n\nexport default function TalkRoom() {\n\n  const { user } = useContext(AuthContext)\n  //APIで持ってきた過去のトーク履歴を入れる\n  const [data, setData] = useState([]);\n  // console.log(data);\n\n  // input欄の管理\n  const [message, setMessage] = useState(\"\");\n  const [list, setList] = useState([])\n\n  const roomId = useParams().room_id\n\n  // 受け取れた\n  // console.log(roomId);\n\n  useEffect(() => {\n    const fetchMessages = async () => {\n      const Messages = await axios.get(`/message/receive/${roomId}`);\n      // console.log(Messages.data);\n\n      const MessageData = Messages.data.map((item)=> {\n        \n        sender_id\n      })\n      console.log(MessageData)\n      setData(MessageData);\n      // console.log(typeof MessageData)\n      console.log(data);\n      data.map((datum) => {\n        console.log(datum);\n        setList(...list, datum);\n\n    })\n    }\n    fetchMessages();\n    \n  }, [])\n  // console.log(data)\n\n  \n\n  \n\n  //送信した段階でAPIを叩いてDBに登録\n  const handleSendMessage = async () => {\n    const User = {\n      senderId: user._id,\n      message: message,\n      roomId: roomId \n    }\n    //APIを叩いて、データを保存する\n    try {\n      const message = await axios.post(\"/message/send\", User)\n      // console.log(message.data);\n      //serverへ送信\n      socket.emit(\"send_message\", message.data);\n    } catch (err) {\n      console.log(err);\n    }\n    \n    \n    setMessage(\"\");\n    console.log(\"sousinn\")\n  }\n\n  //サーバーから受信\n  socket.on(\"received_message\", (data) => {\n    const {_id, ...rest} = data\n    console.log(rest)\n    console.log(\"データでした\")\n    //リストにデータを追加\n    setList([...list, data])\n  })\n  \n  return (\n    <div className=\"talkroom\">\n      <div className=\"container\">\n        <h2>チャット</h2>\n        <div className=\"chatInputButton\">\n          <input type=\"text\" placeholder='にちゃあ・・・っと' onChange={(e) => setMessage(e.target.value)} value={message}/>\n          <button style={{ backgroundColor: message === \"\" ? \"rgba(0,0,0,0.5)\" : \"rgba(0,0,0,1)\"}} disabled={message === \"\"} onClick={handleSendMessage}>送信する</button>\n        </div>\n        {list.map((chat,index) => (\n          <div key={index} className=\"chatArea\" >\n            {chat}\n          </div>\n        ))}\n      </div>\n    </div>\n  )\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}