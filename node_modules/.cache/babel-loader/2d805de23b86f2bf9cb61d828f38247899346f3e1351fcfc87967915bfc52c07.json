{"ast":null,"code":"var _jsxFileName = \"/home/oshimayamato/practice/matching/frontend/src/pages/rooms/TalkRoom.jsx\",\n  _s = $RefreshSig$();\nimport axios from 'axios';\nimport React, { useContext, useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { io } from 'socket.io-client';\nimport { AuthContext } from '../../state/AuthContext';\nimport \"./TalkRoom.css\";\n//通信したいURLを指定\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io(\"http://localhost:5000\");\n//CORSの関係でエラーが出るので\n//サーバー側で処理を書く\n\nexport default function TalkRoom() {\n  _s();\n  const roomId = useParams().room_id;\n\n  // 受け取れた\n  // console.log(roomId);\n\n  useEffect(() => {\n    const fetchMessages = async () => {\n      const Messages = await axios.get(`/message/receive/${roomId}`);\n      // console.log(Messages);\n      setData(Messages);\n    };\n    fetchMessages();\n    data.map(datum => {\n      setList();\n    });\n  }, []);\n  const {\n    user\n  } = useContext(AuthContext);\n  //APIで持ってきた過去のトーク履歴を入れる\n  const [data, setData] = useState([]);\n  // console.log(data);\n\n  // input欄の管理\n  const [message, setMessage] = useState(\"\");\n  const [list, setList] = useState([]);\n\n  //送信した段階でAPIを叩いてDBに登録\n  const handleSendMessage = async () => {\n    const User = {\n      senderId: user._id,\n      message: message,\n      roomId: roomId\n    };\n    //APIを叩いて、データを保存する\n    try {\n      const message = await axios.post(\"/message/send\", User);\n      console.log(message);\n    } catch (err) {\n      console.log(err);\n    }\n    //serverへ送信\n    socket.emit(\"send_message\", message);\n    setMessage(\"\");\n    console.log(\"sousinn\");\n  };\n\n  //サーバーから受信\n  socket.on(\"received_message\", data => {\n    console.log(data);\n    console.log(\"データでした\");\n    //リストにデータを追加\n    setList([...list, data]);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"talkroom\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"\\u30C1\\u30E3\\u30C3\\u30C8\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chatInputButton\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"\\u306B\\u3061\\u3083\\u3042\\u30FB\\u30FB\\u30FB\\u3063\\u3068\",\n          onChange: e => setMessage(e.target.value),\n          value: message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            backgroundColor: message === \"\" ? \"rgba(0,0,0,0.5)\" : \"rgba(0,0,0,1)\"\n          },\n          disabled: message === \"\",\n          onClick: handleSendMessage,\n          children: \"\\u9001\\u4FE1\\u3059\\u308B\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), list.map((chat, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chatArea\",\n        children: chat\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n}\n_s(TalkRoom, \"QAOM+yBpK+h4vY+CtzmYSwtS1gI=\", false, function () {\n  return [useParams];\n});\n_c = TalkRoom;\nvar _c;\n$RefreshReg$(_c, \"TalkRoom\");","map":{"version":3,"names":["axios","React","useContext","useEffect","useState","useParams","io","AuthContext","socket","TalkRoom","roomId","room_id","fetchMessages","Messages","get","setData","data","map","datum","setList","user","message","setMessage","list","handleSendMessage","User","senderId","_id","post","console","log","err","emit","on","e","target","value","backgroundColor","chat","index"],"sources":["/home/oshimayamato/practice/matching/frontend/src/pages/rooms/TalkRoom.jsx"],"sourcesContent":["import axios from 'axios';\nimport React, { useContext, useEffect, useState } from 'react'\nimport { useParams } from 'react-router-dom';\nimport { io } from 'socket.io-client';\nimport { AuthContext } from '../../state/AuthContext';\n\nimport \"./TalkRoom.css\"\n  //通信したいURLを指定\n  const socket = io(\"http://localhost:5000\");\n  //CORSの関係でエラーが出るので\n  //サーバー側で処理を書く\n\nexport default function TalkRoom() {\n\n  const roomId = useParams().room_id\n\n  // 受け取れた\n  // console.log(roomId);\n\n  useEffect(() => {\n    const fetchMessages = async () => {\n      const Messages = await axios.get(`/message/receive/${roomId}`);\n      // console.log(Messages);\n      setData(Messages);\n    }\n    fetchMessages();\n    data.map((datum) => {\n      setList()\n    })\n  }, [])\n\n  \n\n  const { user } = useContext(AuthContext)\n  //APIで持ってきた過去のトーク履歴を入れる\n  const [data, setData] = useState([]);\n  // console.log(data);\n\n  // input欄の管理\n  const [message, setMessage] = useState(\"\");\n  const [list, setList] = useState([])\n\n  //送信した段階でAPIを叩いてDBに登録\n  const handleSendMessage = async () => {\n    const User = {\n      senderId: user._id,\n      message: message,\n      roomId: roomId \n    }\n    //APIを叩いて、データを保存する\n    try {\n      const message = await axios.post(\"/message/send\", User)\n      console.log(message);\n    } catch (err) {\n      console.log(err);\n    }\n    //serverへ送信\n    socket.emit(\"send_message\", message);\n    setMessage(\"\");\n    console.log(\"sousinn\")\n  }\n\n  //サーバーから受信\n  socket.on(\"received_message\", (data) => {\n    console.log(data);\n    console.log(\"データでした\")\n    //リストにデータを追加\n    setList([...list, data])\n  })\n  \n  return (\n    <div className=\"talkroom\">\n      <div className=\"container\">\n        <h2>チャット</h2>\n        <div className=\"chatInputButton\">\n          <input type=\"text\" placeholder='にちゃあ・・・っと' onChange={(e) => setMessage(e.target.value)} value={message}/>\n          <button style={{ backgroundColor: message === \"\" ? \"rgba(0,0,0,0.5)\" : \"rgba(0,0,0,1)\"}} disabled={message === \"\"} onClick={handleSendMessage}>送信する</button>\n        </div>\n        {list.map((chat,index) => (\n          <div key={index} className=\"chatArea\" >\n            {chat}\n          </div>\n        ))}\n      </div>\n    </div>\n  )\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}